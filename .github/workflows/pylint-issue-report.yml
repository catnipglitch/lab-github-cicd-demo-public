# プッシュやPRで Pylint のエラーを収集し単一の Issue に集約するワークフロー
name: Pylint Issue Reporter (Pylint to Issue)

on:
  push:
  pull_request:

permissions:
  contents: read
  issues: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        run: |
          python -m pip install --upgrade pip uv

      - name: Sync dependencies
        run: |
          uv sync --frozen --dev

      # 1) pylint を JSON で出力（CIは落とさない）
      - name: Run pylint (JSON)
        run: |
          uv run pylint $(git ls-files '*.py') -f json -o pylint.json || true

      # 2) JSON から E/F だけ抽出して Markdown を作成
      - name: Build Markdown report (errors only)
        run: |
          uv run python - <<'PY'
          import json, pathlib, os
          p = pathlib.Path("pylint.json")
          items = json.load(p.open()) if p.exists() and p.stat().st_size else []
          errors = [i for i in items if i.get("type") in {"error","fatal"}]
          lines = ["# Pylint Errors (E/F only)", ""]
          lines.append(f"Detected errors: **{len(errors)}**")
          lines.append("")
          if errors:
              lines.append("| File | Line | Code | Message |")
              lines.append("|------|------|------|---------|")
              for it in errors[:200]:
                  lines.append(f"| `{it['path']}` | {it['line']} | `{it['message-id']}` | {it['message'].replace('|','\\|')} |")
              if len(errors) > 200:
                  lines.append("")
                  lines.append(f"_and {len(errors)-200} more..._")
          open("pylint.md","w",encoding="utf-8").write("\n".join(lines))
          # エラー件数を後段に渡す
          print(f"ERROR_COUNT={len(errors)}")
          open(os.environ["GITHUB_OUTPUT"],"w").write(f"error_count={len(errors)}\n")
          PY
        id: build

      # 3) 固定Issueを作成/更新（0件ならクローズ）
      - name: Open or update single Lint Issue
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const title = "🔧 Lint errors (pylint)";
            // 既存のオープンIssueからタイトル一致を探す
            const {data: issues} = await github.rest.issues.listForRepo({owner, repo, state: 'open'});
            const fs = require('fs');
            const body = fs.readFileSync('pylint.md','utf8');
            const found = issues.find(i => i.title === title);

            const count = parseInt(`${{ steps.build.outputs.error_count }}` || "0", 10);

            if (count > 0) {
              if (found) {
                await github.rest.issues.update({owner, repo, issue_number: found.number, body});
              } else {
                await github.rest.issues.create({owner, repo, title, body});
              }
            } else {
              if (found) {
                await github.rest.issues.update({owner, repo, issue_number: found.number, state: 'closed', body});
              }
            }
